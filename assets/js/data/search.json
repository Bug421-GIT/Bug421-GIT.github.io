[
  
  {
    "title": "6.网络层",
    "url": "/posts/6.%E7%BD%91%E7%BB%9C%E5%B1%82/",
    "categories": "计算机网络",
    "tags": "computerNetwork",
    "date": "2022-06-18 00:00:00 +0800",
    





    
    "snippet": "​\t网络体系结构的最顶层，享受下层提供的服务，无视下层具体操作活动；​\t通过应用进程的交互，实现特定网络应用的问题；​\t是设计和建立计算机网络的最终目的C/S 和 P2PC/S客户 / 服务器（Client/Server）  客户：是计算机、是进程，是服务请求方  服务器：          是计算机、是进程，是服务提供方      总是处于运行状态，等待客户请求      具有固定的端口号...",
    "content": "​\t网络体系结构的最顶层，享受下层提供的服务，无视下层具体操作活动；​\t通过应用进程的交互，实现特定网络应用的问题；​\t是设计和建立计算机网络的最终目的C/S 和 P2PC/S客户 / 服务器（Client/Server）  客户：是计算机、是进程，是服务请求方  服务器：          是计算机、是进程，是服务提供方      总是处于运行状态，等待客户请求      具有固定的端口号，主机有固定的IP地址        服务集中型          应用服务集中 比客户端少得多的 服务器上      常会出现服务器跟不上客户端请求的情况      计算机群集（服务器场）构建一个强大的虚拟服务器      P2P对等方式 （ Peer - to - Peer）  没有固定的请求者和提供者，应用进程对等、直接通信  服务分散型          大量对等计算机都是服务的提供和请求者      可扩展性：不会因为规模扩大而减低系统性能        用户越多，速度越快；成本优势DHCP​\t动态主机配置协议，又称为即插即用网络。​\t允许一台计算机加入新网络时，可以自动获取IP地址等网络配置信息而不用手工配置。​\tTCP/IP的应用层协议，使用UDP传输​\tDHCP\t服务器的端口67；客户端的端口68工作过程      *discover ** *寻找服务器    客户端 发送UDP用户数据报，包含DHCP发现报文；          目的地址255.255.255.255：不知道当前网络中有多少个DHCP服务端，和他们具体的IP      源地址0.0.0.0：当前主机未分配到IP地址      目的端口号67：非DHCP服务器不监视该端口，收到但丢弃；仅DHCP服务器作出回复      数据域封装有 事务ID + DHCP客户端的MAC地址            Offer 提供一套方案    DHCP服务器收到该报文，          拆分、查找是否有针对其MAC地址的配置信息                  有：将该配置信息封装 → DHCP提供报文          无：默认配置信息封装 → DHCP提供报文                    封装回复报文                  目的地址：255.255.255.255，目标设备未分配到IP地址          源地址：DHCP服务器地址          目的端口号68：非DHCP客户端不监视该接口，收到但丢弃；仅DHCP客户端作出回复                          Request 确认选择某一套方案    客户端收到回复：          根据报文中的事务ID判断是否是自己所请求的报文      配置信息包括：IP地址（使用ARP检测确保该IP未被网络中的其他主机占用）、子网掩码、地址租期、默认网关、DNS服务器      挑选一个（先到的）报文作为自己的DHCP，发送 DHCP请求报文征求其同意：                  目的地址255.255.255.255：告知所有的DHCP，我挑选到它啦          源地址0.0.0.0：现在未获得DHCP服务器的同意          报文内容：事务ID、DHCP客户端的MAC地址、接受租约的IP地址、提供租约的DHCP服务端IP地址等                          ACK 最终确认    服务端回复是否同意租约          目的地址：255.255.255.255      源地址：DHCP服务器            客户端收到确认后，使用ARP检测所分配的IP地址是否被网络其他主机占用          若未被占用，客户端可以开始使用该IP地址      若被占用，                  给DHCP服务器发送 DHCP decline报文撤销IP地址租约          重发 DHCP discover报文寻找方案                          续约 当租期过半时                  客户端请求续约 DHCP request                  源地址：租用的地址          目的地址：DHCP服务器                    服务器不同的反应                  若同意续约 DHCP ACK，得到新的租期          若不同意续约 DHCP NACK，客户端必须立即停用租用的IP地址并重新发送 DHCP discover          若不响应，客户端等待一段时间                    等待到0.875 = 7/8的租期时间，客户端必须重新发送 续约 DHCP request      等待到租期结束，客户端必须停用租用的IP地址并重新发送 DHCP discover            解约 客户端可以随时放弃租用的IP地址，向提供DHCP服务器发送 DHCP release释放报文即可  中继代理​\t某个网络拓扑中没有DHCP服务器，其客户端法发送的 DHCP discover请求使用广播地址255.255.255.255不能经过普通路由器转发而是丢弃，内部又没有可以相应其DHCP请求的服务，导致该网络拓扑中的主机无法自动获取网络配置信息。​\t解决办法，为该路由器配置DHCP服务器的IP地址使之成为 DHCP中继代理​\t路由器收到广播的DHCP discover报文后，会单播转发给其他网络拓扑中存在的DHCP服务器，此后都如此交互​\t使每个网络不必都配置DHCP服务器，至少有一个即可DNS​\t域名系统（Domain Name System），将域名翻译为IP地址寻址​\t每台用户主机都需要经过DNS查找域名对应的IP地址，故DNS服务器不能只有一台，它应该在本地解析或一个分布式服务器集群​\t因特网使用层次结构命名树 + 分布式域名系统，大多数域名在本地解析域名空间​\t1. 各级域名：由若干个分量，以.隔开，分别代表不同级别的域名​\t\t每一级域名（&lt; 63个字符）有 英文（不区分大小写） + 数字 ，完整域名 &lt; 255个字符​\t\t···.三级域名.二级域名.顶级域名 右边大，各级域名由其上级机构管理；顶级域名由因特网名称与数字分配机构ICMN管理  顶级域名TLD（Top Level Domain）分为三类          国家顶级域名nTLD：ISO 3166规定      通用顶级域名gTLD：常见七个（com公司企业、net网络服务机构、org非营利性组织、int国际组织、edu美国教育机构、gov美国政府部门、mil美国军事部门）      反向域名arpa：用以反向域名解析，即IP地址 → 域名        二级域名          由国家自行规定      分为两类                  类别域名：七个（ac科研机构、com工商金融等企业、edu教育机构、gov政府部门、net提供网络服务机构、mil军事机构、org非盈利组织）          行政区域名：34个，分配给各省、自治区、直辖市                      便于维护名字的唯一性，易查询；逻辑概念，而非物理地点域名服务器​\t分布式实现  根 域名服务器          分布式构成的13个根域名服务器，是高层的域名服务器      不直接对域名解析，而是提供该域名所在的 顶级服务器IP地址        顶级 域名服务器          管理该顶级域名下的 二级域名      返回下一级权限服务器的IP地址        权限 域名服务器          管理某个区的域名，主机必须所管辖服务器注册登记      管辖的域名与IP地址的映射关系；下级服务器的地址        本地 域名服务器          主机第一个经过的域名服务器，起着代管作用，对其转发      距离主机距离较近，一般四五个路由器      域名解析解析过程      递归查询    直接一级一级向下查询，本地 – 根 – 顶级 – 权限，获得结果就往回传递        迭代查询    每向一节查询，拿着结果，向另一级查询。    本地 – 跟 = 顶级IP；本地 – 顶级IP = 权限IP；本地 – 权限 = 目标IP；本地服务器将目标IP交给主机  递归查询对被查询的域名服务器负载要求大，所以采用两者相结合：  主机 – 本地：递归查询  本地 – 其余服务器：迭代查询解析原理（？）DNS指针查询（反向查找、逆向解析）的基本原理DNS缓存​\t为提高查询效率，减少查询报文数量，减轻服务器负荷​\t域名服务器广泛使用 高速缓存，存放最近查询过的域名、何处获取的域名映射信息记录​\t本地主机也需要维护好 域名：IP地址数据库​\t缓存为每项内容设置计时器，并删除超过合理时间的项FTP​\t文件传输协议（File Transfer Protocol）  交互式访问，允许指明文件类型与格式、文件存取权限（授权、口令）  屏蔽计算机系统细节，适用于异构网络中任意计算机之间基本工作原理两种不同的传输模式主动模式      服务器监听 熟知端口号21，等待客户发起FTP连接        控制连接：建立TCP连接，用于传送FTP相关控制命令，即命令通道        如果有数据传输，客户端通过命令通道告知服务器：需要开放另一条TCP连接，作为数据通道        数据连接：服务器开放 熟知端口号`20`，向客户发起FTP连接（主动模式），用于传输FTP文件  被动模式  控制连接一样  如果有数据传输，客户端通过命令通道告知服务器：需要开放另一条TCP连接，作为数据通道  数据连接：服务器开启 临时端口（双方协商好的端口号），被动等待客户连接（被动模式），建立数据通道两个TCP连接并行：​\t控制连接需要在绘话期间一直保持打开；​\t数据连接在每次文件传输时建立，结束时结束客户端的接口都是随机的？  控制连接 + 数据连接（为什要？  两种工作模式：PASV + PORT      指令和响应码    断电续传 + 匿名FTP万维网WWW​\tworld wide web，运行在Internet中的分布式应用，而非某种特殊的计算机网络​\t利用超链接，将不同网站的网页连接统一资源定位符URL：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;连接方式两种：  非持续连接          HTTP / 1.0      每次请求就建立TCP连接，收到响应后立即关闭连接      请求一个WWW文档时间 = 2RTT + 文档传送时延      为减少时延，通常会建立多个并行TCP同时请求多个对象；但占用服务器资源        持续连接          HTTP / 1.1      同一个浏览器与该服务器的TCP连接可以继续传送请求和响应      流水线模式：收到响应之前连续发送多个请求，而后服务器一个接一个响应      非流水线模式：只有上一个请求被响应后才可以发送下一个请求      HTTP报文格式HTTP是 面向文本，报文的每一个字段都是一些ASCII码率，且长度不确定请求格式（+各种字段）  请求行          指明方法：GET POST PUT      资源地址：URL      HTTP 版本        首部行          Connect：close — 告诉服务器发送完请求文档后可释放连接      User-Agent：Mozilla/5.0 — 告诉服务器 浏览器使用的类型和版本      Accept-Language：cn — 告诉服务器 用户希望优先得到中文版本的文档                  方法      描述                  HEAD      请求URL标志的文档首部              CONNECT      用于代理服务器              OPTIONS      请求一些选项信息              TRACE      用来进行环回测试                                    GET      请求URL标志的文档              POST      向服务器发送数据              PUT      在指明的URL下存档一个文档              DELETE      删除URL标志的文档              PATCH      对PUT方法补充，对已知资源进行局部更新      响应（+各种字段）            状态码      （五大类，33种）描述                  1XX      表示通知信息，如：请求收到了、正在进行处理              2XX      表示成功，如：接受了、知道了              3XX      表示重定向，即要完成请求还必须采取进一步的行动              4XX      表示客户的差错，如：请求中有错误的语法、或不能完成              5XX      表示服务器的差错，如：服务器失效无法完成请求      Cookie​\tHTTP为无状态协议，使用Cookie对其进行状态化的技术  双方建立TCP连接成功时，服务器为用户生成唯一的cookie识别码Set-Cookie  用户端将Cookie信息存放到文档  每次用户端发送请求，读取Cookie码并将其携带上  服务器根据Cookie码识别用户，并返回个性化页面HTTPS（？  详细握手过程  摘要算法、数字签名、数字证书的原理和过程电子邮件​\t电子邮件系统上采用 客户/服务器方式，有三个部件构成：用户代理，邮件服务器，电子邮件所需的协议  用户代理：用户与电子邮件系统的接口，又称 电子邮件客户端软件  邮件服务器：          电子邮件系统的基础设施，Internet所有的ISP（Internet Service Provider，互联网服务提供商）都有邮件服务器      其功能是发送和接受邮件，维护用户的邮箱        协议：邮件发送协议（SMTP）+邮件读取协议（POP3，IMAP）邮件协议的使用范围SMTPSMTP 与 MIME  SMTP协议          只能传送ASCII码文本数据，不能传送可执行文件或其他的二进制对象。      不能满足传送多媒体邮件（例如带有图片、音频或视频数据）的需要。      许多其他非英语国家的文字（例如中文、俄文、甚至带有重音符号的法文或德文）也无法用SMTP传送。        MIME（多用途因特网邮件扩展，Multipurpose Internet Mail Extensions）          为解决SMTP传送非ASCII码文本的问题，      增加了5个新的邮件首部字段，这些字段提供了有关邮件主体的信息。      定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。      定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。      实际上，MIME不仅仅用于SMTP，也用于后来的同样面向ASCII字符的HTTP基本工作原理信息格式邮件读取协议​\t都使用基于TCP连接的客户/服务器方式POP 邮局协议​\tPost Office Protacol，是Internet的正式标准。  非常简单，功能有限  用户只能 下载+删除、下载+保留的方式 获取邮件到计算机  不允许用户在邮件服务器上管理自己的邮件  熟知端口110IMAP Internet邮件访问协议​\tInternet Message Access Protocol，是Internet的建议标准  功能强大，是一个联机协议  用户可以在计算机上操作邮件服务器的邮箱  熟知端口143基于万维网的电子邮件​\t通过浏览器 → 邮件服务器万维网，撰写、收发、阅读和管理；无需安装软件TCP 区分应用进程；实现可靠传输添加ETH 使之成为（以太网）帧帧：目的地址 + 源地址 + 类型 + 包 + 4字节校验码前导码：1字节帧开始界定符 + 7字节前同步码 让目的主机做好接受帧的准备"
  },
  
  {
    "title": "5. 运输层",
    "url": "/posts/5.%E8%BF%90%E8%BE%93%E5%B1%82/",
    "categories": "计算机网络",
    "tags": "computerNetwork",
    "date": "2022-06-16 00:00:00 +0800",
    





    
    "snippet": "​\t主机到主机的通信：物理层 + 数据链路层 + 网络层​\t主机进程间的通信：传输层​\t如果为运行在不同主机的 应用进程的逻辑通信提供直接通信服务，又称为端到端协议（端口）​\t向上层隐藏下面的网络服务核心细节，提供两种不同的运输协议  面向连接的TCP  面向无连接UDP端口号​\t进程标识符PID，不同OS、不同进程的表示格式不同，使用统一的方法对TCP/IP体系的应用进程标识​\t16bit...",
    "content": "​\t主机到主机的通信：物理层 + 数据链路层 + 网络层​\t主机进程间的通信：传输层​\t如果为运行在不同主机的 应用进程的逻辑通信提供直接通信服务，又称为端到端协议（端口）​\t向上层隐藏下面的网络服务核心细节，提供两种不同的运输协议  面向连接的TCP  面向无连接UDP端口号​\t进程标识符PID，不同OS、不同进程的表示格式不同，使用统一的方法对TCP/IP体系的应用进程标识​\t16bit表示，取值范围0~65535；      熟知端口号：0~1023；FTP 21/20; HTTP 80; DNS 53        登记端口号：1024~49151；必须登记手续        短暂端口号：49152~65535；动态端口号    【端口号只具有本地意义】不同OS、不同进程的端口号之间没有联系    复用：多个线程利用一个 IP+端口 发送信息称为 复用；  分用：多个线程利用一个 IP+端口 接收信息成为 分用；UDP​\tUser Datagram Protocol 用户数据报协议  无连接的 — 支持单播、多播以及广播  面向应用报文：          以报文为单位      对应用层传输下来的报文既不合并也不拆分，保留报文的边界        不可靠服务          运输层、网际层都是向上提供无连接、不可靠的传输服务      当报文出现误码、丢失时，接收方仅丢弃而什么都不做        适用于IP电话、视频会议、直播等实时应用数据报格式​\t首部（仅8字节） + 数据部分TCP​\tTransmission Control Protocol 传输控制协议  面向连接（逻辑上的连接，物理上仍然是无连接）— 仅支持单播  面向数据流：          传送字节流      不保证一次传完、只保证传输数据一致；      要求应用层有能力处理乱序字节流、多次传输的数据流拼接完整还原        可靠的服务          网际层可能出现传输差错，但TCP可以使其差错重传      不会出现传输差错      数据报格式  源端口、目的端口：          各16bit，用于识别发送、接受该TCP报文段的应用进程      源端口：填写暂时端口号（？      目的端口：填写该应用的熟知端口号（？        序号：          32bit，增加到最后一个后又从0开始      指出本TCP报文段数据载荷的第一个字节序号        确认号：          32bit，增加到最后一个后又从0开始      指出希望收到下一个数据载荷的第一个字节的序号；对之前收到的数据进行确认，收到数据的最后一个字节号+1      ！需要搭配 标志位 ACK使用：                  ACK=1时才有效，ACK=0时无效          TCP规定，在建立连接后TCP报文段必须把 ACK=1                      数据偏移：          4bit，以4字节为单位      指出 数据载荷的起始 距离 TCP报文段的起始 处有多远      指出TCP报文的首部长度                  首部固定长度为20字节，数据偏移量min = (0101) ~2~ = 5*4          首部最大长度为60字节，数据偏移量max = (1111) ~2~ = 15*4                      窗口：          16bit，以字节为单位      指出 发送本报文段的一方 的接受窗口      根据接收方的接受能力 控制 发送方的发送能力，即流量控制      接收方 让 发送方 设置其发送窗口的依据之一：[拥塞窗口，接受窗口]~min~        校验和          16bit，检查 TCP报文段的首部 + 数据载荷 两个部分      校验方式与UDP一样        标识符          SYN：建立连接的同步符      FIN：释放连接的终止符      RST：复位TCP连接                  表示连接出现异常，必须释放后重新建立连接          拒绝非法报文段 、 拒绝打开一个TCP连接                    PSH：推动标志位，该报文尽快推送上交应用进程，而不必等待接收缓存填满再上传      URG：紧急标志位，搭配 紧急指针使用                  URG=1，紧急指针有效；URG=0，紧急指针无效          发送方有紧急数据时，可插队到发送缓存的最前面，并立即封装一个TCP段发送          紧急指针：数据载荷有多长的紧急数据，紧急数据之后的普通数据          接收方根据紧急指针取出紧急数据，直接上交应用进程，而不必等待接收缓存填满再上传                      选项（可选）          最大报文段长度MSS选项：TCP报文的数据载荷最大长度      窗口扩大选项：为扩大窗口（提高吞吐率）      时间戳选项：                  计算往返时间RTT          处理序号超范围情况，又称为凡是序号绕回PAWS                    选择确认选项        填充：使整个首部长度能被4整除，数据偏移字段以4字节为单位连接控制​\tTCP面向连接，三个阶段  建立连接（三次握手）  数据传送  释放连接（四次挥手）三次握手 — 连接  解决问题：          确知对方的存在，协商参数（窗口值max，是否使用时间戳选项一级服务质量等）      双方对运输实体资源（缓存大小、连接表中的项目）进行分配        双方先建立传输控制块：          TCP连接表      指针：发送和缓存的、重传队伍的      当前发送和接受的序号        服务器等待客户端的连接，成为被动打开连接  客户端主动发起的连接，称为主动打开连接      三次握手：    在不可靠网络信道中建立可靠的连接                  你听见我在说话了吗？（客户端发送SYN=1,seq=x，进入SYN-SENT同步已发送状态）        （SYN=1：不允许携带数据，但要消耗一个序号；seq=x：客户端进程所选择的初始序号；）                    我听见了，你能听见我在说话吗？（服务端回复SYN=1,ACK=1,seq=y,ack=x+1,进入SYN-RCVD同步已接收状态）        （SYN=1,ACK=1：TCP连接请求确认报文，不允许携带数据，但要消耗一个序号；）        （seq=y：服务器进程所选择的初始序号；ack=x+1：对客户端初始序号确认）                    我听见了你在说话了（客户端回复ACK=1,seq=x+1,ack=y+1，进入establish连接已建立状态）        （ACK =1：普通的确认报文；seq=x+1：请求连接报文已消耗掉一个序号；ack=y+1：对服务器初始序号的确认）        （TCP规定：普通的确认报文段可以携带数据，如不携带则不消耗序号；则下一个报文序号仍为x+1）                    双方开始通话（服务器收到确认报文，也进入establish链接已建立状态）                  为什么不使用两次握手？    防止已经出错的请求报文突然又传给服务器，而引起的错误                  你听到我在说话了吗？（客户端第一次发送SYN，滞留或丢失）                    无回复                    （客户端重新发送SYN包）你听到我在说话了吗？                    我听见了，我们开始聊天吧！（服务端正常收到，并回复SYN + ASK）        （二次握手成功，双方开始建立连接）                    第一次发送的SYN突然恢复，会出现两种情况                  双方正在连接，此时服务端以为客户端请求新的连接，发送回复SYN + ASK建立两次握手后，进入等待数据状态；服务端建立两个连接，而客户端只认可一个连接，导致状态不一致。          双方已释放连接，服务器以为客户端重新请求连接，发送回复SYN + ASK建立两次握手后，而进入等待数据状态；客户端无连接请求，将不会回复数据。            四次挥手 – 释放                                服务器等待客户端的释放，成为被动关闭  客户端主动发起的释放，称为主动关闭      我客户端说完了，要撤咯（客户端发送FIN=1,ACK=1,seq=u,ack=v，进入FIN-WAIT-1终止等待状态）    （FIN=1：即使不携带一个数据，也要消耗一个序号）    （seq=u：客户端最后已发送的最后一个字节序号+1；ack=v：客户端最后已收到的最后一个字节序号+1）        知道了，我服务端还有话要说点（服务器发送确认报文ACK=1,seq=v,ack=u+1，进入CLOSE-WAIT关闭等待状态）    （普通的确认报文段， 服务器通知服务器进程关闭链接；）    （seq=v：服务器最后已发送的最后一个字节序号+1；ack=u+1：服务器最后已收到的最后一个字节序号+1）    （客户端收到报文，进入FIN-WAIT-2终止等待状态）    （两端的应用进程方向连接释放，进入 半关闭状态：客户进程无话要说，服务器进程可能有话要说，客户仍要开放接收）        我服务端讲完了，听见没啊？（服务器发送FIN=1,ACK=1,seq=w,ack=u+1，并进入LAST-ACK最后确认状态）    （FIN=1,ACK=1：TCP连接释放报文，seq=w：半关闭状态下可能发送的数据序号，ack=u+1：对收到的报文进行重复确认）        嗯嗯，听到你说的话了，等你先挂电话（客户端发送ACK=1,seq=u+1,ack=w+1，并进入TIME-WAIT超时等待状态）    （普通的确认报文段，seq=u+1：客户端之前已发送的序号，fin消耗掉一个序号；ack=w+1：客户端收到的序号确认）    （服务器收到报文，立即关闭连接，进入closed关闭状态）        （客户端超时等待结束，关闭连接）  超时等待状态  为确保服务器端已收到ACK包；时间=2MSL，最长报文段寿命的两倍（一个来回）  ACK丢包！服务器会重新发送FIN包： 喂？喂？喂！          客户端在超时等待中可捕获到这个包，而重新第四次挥手      立即断开连接，客户端无法捕获这个FIN包，没有第四次成功挥手，将会使得服务器一直处于连接状态      保活计时器​\t【情景】客户端出现故障。服务端不会再收到信息，如果及时发现对方已下线？  服务器维护一个 保活计时器  客户端 → 服务器，服务器就重启保活计时器（2h）  保活计时器到时候，服务器 → 客户端发送 探测报文段；之后的75s/次，一连10次仍然没有响应，关闭连接数据确认为解决丢包、乱序问题      为每一个连接建立 发送缓冲区，建立连接后的第一个字节序列号为0，此后序列号 + 1        发送报文格式：取其数据序列号 + 长度 + 数据内容        确认报文格式：ACK = 序列号 + 长度 = 下一包起始序列号    （可以连续发送多个发送报文，接收端只需回复一次ACK就可以）    （收到ACK确认报文，发送端可将已接受字段删除）        切割发送：根据序列号+长度重组 = 数据内容        丢失重发：ACK = 丢失报文的序列号    【全双工：以上过程部区分客户端、服务端】  流量控制​\tFlow Control, 让发送方的发生效率不要太快，让接收方 来得及 接受；滑动窗口​\t依靠滑动窗口实现 可靠传输  发送窗口和接受窗口并不重视一样大          网络传输窗口值有一定的滞后      发送方可根据自身情况修改发送窗口        不按序到达的数据，TCP无明确规定          接收方一律丢弃，管理简单但浪费资源，发送方需要重复发送数据      接收方暂存到接受窗口，等待数据齐全后，交付给上层的应用进程        接收方必须有 累计确认 和 捎带确认 机制          捎带确认：可以在有数据发送的时候，吧确认信息捎带      不应该过分推迟确认：每隔一个报文段就发送一个确认      不经常发送，因为很少要求经常同时向两个方向发送        TCP通信是全双工通信【举例】每个报文可携带100字节数据，将要发送的数据编号后以100为单位分割      建立TCP连接时，接收方B告诉发送方A：我的接收窗口为400    （A的发送窗口设置为400，在未收到B的确认，可将落入发送窗口的全部数据一直发送出去）        发送A发送1~100字节数据，seq=1,DATA，还能发送300        发送A发送101~200字节数据，seq=101,DATA，还能发送200        发送A发送201~300字节数据，seq=201,DATA(丢失)，还能发送100        接受B对1~200字节数据累计确认，并将接收窗口设置为300，ACK=1,ack=201,rwnd=300    （ACK确认标志符，ack确认了n字节数之前的数据，rwnd重置的窗口的大小。）    （:number1: B对A进行 流量控制）    （A向前滑动发送窗口，到ack确认的字节数后201；调整发送窗口的大小=300；丢弃发送缓存中已被确认接收的数据1~200）    （201~300字节已发送但没有收到确认，重传计时器开始计时）        发送A发送301~400字节数据，seq=301,DATA，还能发送100        发送A发送401~500字节数据，seq=401,DATA，还能发送0，不能再发送新数据    （重传计数器到点，开始重传旧数据；300窗口为丢失数据保留一个100发送，但不能再发送新数据了）        发送A发送201~300字节数据，seq=201,DATA，还能发送300        接受B对201~500字节数据累计确认，并将接收窗口设置为100，ACK=1，ack=501，rwnd=100    （:number2: B对A进行 流量控制）    （A向前滑动发送窗口，到ack确认的字节数后501；调整发送窗口的大小=100；丢弃发送缓存中已被确认接收的数据201~500）        发送A发送501~600字节数据，seq=501,DATA，还能发送0，不能再发送新数据        接受B对600之前的字节数据累计确认，并将接收窗口设置为100，ACK=1，ack=601，rwnd=0    （:number3: B对A进行 流量控制）    （A向前滑动发送窗口，到ack确认的字节数后601；调整发送窗口的大小=0；丢弃发送缓存中已被确认接收的数据501~600）  【窗口为0的确认】      当B接收缓存有了一些存储空间，于是发送我要调整窗口为300，但丢失了！    形成死锁：主机A等待B的非零窗口通知；主机B等待A的数据报文        A主动发送零窗口探测报文，携带1字节数据，询问接收方        每次A接收到0窗口报文后，启动持续计时器，超时时主动询问        B收到零窗口探测报文，需回复确认报文，并告知现在的窗口大小，ACK=1,rwnd=300    B接受缓存已满，可以不接受一般报文，但必须接受紧急报文、确认报文和零窗口探测报文  拥塞控制慢启动、拥塞避免  拥塞窗口cwnd：          值取决于 网络拥塞程度，并动态变化      维护原则：                  网络未出现拥塞，cwnd值就大一些；          网络一旦出现拥塞，cwnd值就小一些；                    发送方的发送窗口swnd = cwnd        网络拥塞的依据：没有按时收到应当到达的确认报文（发送超时重传）  两种控制的应用：慢开始门限 ssthresh          cwnd &lt; ssthresh，拥塞窗口 &lt; 慢开始门限 —- 使用慢开始算法（cwnd × 2）      cwnd &gt; ssthresh，拥塞窗口 &gt; 慢开始门限 —- 停止使用慢开始，而使用拥塞算法（cwnd + 1）      cwnd = ssthresh，拥塞窗口 = 慢开始门限 —- 可使用慢开始，也可使用拥塞算法        维护一个 慢开始门限 ssthresh          设置一个初始值      每次发生网络拥塞时                  拥塞窗口值cwnd / 2 = ssthresh          cwnd重置为初始值，并开始慢开始                    快速重传、快速恢复  不是所有的报文丢失由于网络拥塞导致的，当超时重传时判断是否为 网络拥塞          是网络拥塞，使用拥塞算法      不是网络拥塞，开启快重传、快恢复        快速重传：          要求接收方每次收到报文，都要对其及时确认      若收到失序的报文，对失序报文重复确认（确认报文只能确认最高序号）      同时保留失序的报文      发送方接受三次重复的报文确认                  网络未拥塞          一至两次重复确认，可能报文滞留在网络某处          三次确认可认为报文丢失，重发报文                      快速恢复：          启用快重传后，抛弃慢启动，使用快速恢复      ssthresh = cwmd / 2      cwmd = ssthresh      拥塞避免算法      超时重传超时时间选择​\t超时重传的时间ORT 应该略小于 一个报文段往返时间RTTO  过短：不必要的重传，网络拥塞  过长：不必要的等待，网络闲置  略？：经过不同速率的网络、不同数量的路由等等因素加权平均往返时间 RTTs – – 平滑的往返时间：多次测量的RTT样本加权平均加权平均往返时间 RTTs\t初始化：RTTs = RTT1\t新的RTTs1 = （1 - α）× RTTs1 + α × 新的RTT样本（0 &lt;= α &lt; 1，α=1/8=0.125）RTT偏差的加权平均RTTd\t初始化：RTTD = RTT1 ÷ 2\t新的RTTD = （1 - β ）× RTTD1 + β × |RTTs1 - 新的RTT样本| （0 &lt;= β &lt; 1，β=1/4=0.25）超时重传时间 RTO\tRTP = RTTs + 4 × RTTd      RTT的测量准确与否非常重要                  RTT的测量有难度：                  数据报文段丢失后重发。距离收到确认报文的时间，是第一次报文还是第二次报文？          数据未收到确认而重发。距离收到确认报文的时间，是第一次报文还是第二次报文？                            Karn算法：只要报文重传，就不采用其RTT样本，RTO也不会重新计算        （若报文时延突然增大且持续很久，RTO内不会收到确认报文，于是重发，而不更新RTO，将一直重发）                    修正Karn算法：报文重传，就把RTO增大一些（× 2）            "
  },
  
  {
    "title": "4. 网络层",
    "url": "/posts/4.%E7%BD%91%E7%BB%9C%E5%B1%82/",
    "categories": "计算机网络",
    "tags": "computerNetwork",
    "date": "2022-06-14 00:00:00 +0800",
    





    
    "snippet": "​\t实现网络互连，数据包在其之间的传输      向上层（运输层）提供怎样的服务？IP提供的是 面向无连接，不可靠服务        网络寻址问题：A类地址、B类地址、C类地址        路由选择问题：路由表 + 目的地址          路由表的数据来源：人工设置（小型，不改变）、路由选择协议中的选择算法        因特网，使用TCP/IP协议，网络层使用网际协议IP，由此TCP...",
    "content": "​\t实现网络互连，数据包在其之间的传输      向上层（运输层）提供怎样的服务？IP提供的是 面向无连接，不可靠服务        网络寻址问题：A类地址、B类地址、C类地址        路由选择问题：路由表 + 目的地址          路由表的数据来源：人工设置（小型，不改变）、路由选择协议中的选择算法        因特网，使用TCP/IP协议，网络层使用网际协议IP，由此TCP/IP中的网络层又称为网际层  提供的两种连接      面向连接的虚电路          可靠通信由网络来保障      建立网络层的连接——虚电路CV，沿着此电路发送分组      目的主机地址仅在建立初阶段使用，之后 首部只携带虚电路的编号      通信结束后，需要释放所建立的虚电路        虚电路 + 可靠传输协议 = 无传输差错          虚电路是一条逻辑上的电路，事实上不存在      电话交换的电话通信，是建立一条物理上的电路            无连接的数据报服务          可靠通信由用户主机来保障      不建立网络层练级——每个分组可走不同的路径      目的主机的完整地址需要时刻携带      可能出现传输差错，但造价低廉，适应性强        将复杂网络处理功能至于因特网边缘（用户主机和其内部的运输层）  IPv4​\t每一台主机（或路由器）的每个接口，分配唯一的32bit的识别符​\t点分十进制表示法，每8位分为一组分类编址方式  A类地址：8位（网络号）+ 24位（主机号）          网络号第一个比特值一定为0      最小网络号0，保留不指派                  0.0.0.0是一个特殊的网络地址，表示“在本网络上的本主机”，只能作为源地址使用                    最大网络号127，作为本地环回测试地址，不指派                  最小的：127.0.0.1          最大的：127.255.255.254                    可指派的网络地址1.0.0.0 - 126.0.0.0        B类地址：16位（网络号）+ 16位（主机号）          网络号第一二个比特值一定为10      最小网络号，也是第一个可指派的网络号 128.0      最大网络号，也是最后一个可指派的网络号 129.255      可指派的网络地址：128.0.0.0 - 191.255.0.0        C类地址：24位（网络号）+ 8位（主机号）          网络号第一二三个比特值一定为110      最小的网络号，也是第一个可指派的网络号 192.0.0      最大的网络号，也是最后一个可指派的网络号 223.255.255      可指派的网络地址：192.0.0.0 - 223.255.255.0        D类地址：多播地址  E类地址：保留今后使用  广播地址：255.255.255.255，表示“只在本网络进行广播”，只能作为目的地址使用子网划分      为什么要划分子网：          申请更多的IP地址，会导致路由表记录数量怎多      浪费原有网络中剩余的IP地址            子网地址计算    【例题】网络地址为218.75.230.0，使用子网掩码255.255.255.128对其子网划分。                  218.75.230.0：该网络为C类网络地址，前三个值为网络号，最后一位是主机号                    255.255.255.128：                  前三个255表示连续24个比特1，对应了网络号部分，                            128化为二进制表示一个比特1，即从主机号中借用了一个比特作为子网号                  划分的子网数量 2^1 = 2，每个子网可分配的地址数量2^（8-1 ) - 2=126    [去掉主机号全为0的网络地址、全为1的广播地址]        默认子网    在未划分子网的情况下使用子网掩码    网络号对应掩码全为1，主机号的对应掩码全为0  报文首部格式首部长度：4个字节  最大值为15：固定部分 20字节 + 可变部分 40字节  最小值为10：固定部分 20字节      IP数据报的首部长度一定是4的整数倍    区分服务          8bit，一般不使用      该字段的不同数值可提供不同等级的服务质量            总长度          首部长度 + 数据载荷            【标识 + 标志 + 片偏移：IP数据报分片】        生存时间：防止数据报在网络中兜圈 – 路由环路          以“时间”为计数，初始 - 当前路由花费的时间 = 剩余时间                  ＞0，转发；≤ 0，丢弃                    以“跳数”为计数，跳转指定次数                  ＞0，转发；≤ 0，丢弃                          协议                  8bit，数据部分是何种协议数据单元                    常用协议与字段值                      首部检验和          16bit，检验首部在传输过程是否出现差错      IP层本身不提供可靠传输服务，因而IPv6将不再进行校验        源IP地址和目的IP地址，各占32bit分片方式  为什么要分片：          IP数据报需要打包成帧，而帧长度受限于的最大传输单位MTU      当IP数据报长度 &gt; 帧，需要 分片 成更小的数据报文        标识：          16bit      同一个数据报的各分片应该具有相同的标识      IP软件维持一个计数器，每产生一个数据报计数器+1，赋值给标识字段        标志          3bit      DF位：（Don’t 分片？）                  1 – 不允许分片          0 – 允许分片                    MF为：（More 分片?）                  1 – 后面还有分片          0 – 这是最后一个分片                    保留位，必须设置为0        片偏移          13bit      分片数据报的数据载荷部分 在原数据报位置 偏移多少个位置      以8个字节为单位 – 数据载荷的第n个字符 / 8 （再次分片，第n遵循最初的位置）      选路？ICMP​\t为提高IP数据报 转发和交付成功的概率，在网际层使用网际控制报文协议Internet control message protocol​\t被封装在IP数据报中发送​\t应用场景：  分组网间探测PING          测试主机间的连通性      应用层直接使用网际层的ICMP（而不ton过运输层的TCP和UDP）      使用ICMP的回送请求和回答请求        跟踪路由          测试IP数据报经过哪些路由传递      Windows系统                  tracect命令          应用层直接只用网际层ICMP          ICMP回送请求、回答报文、差错报文                    Unix版本                  traceroute命令          在运输层使用UDP协议          只使用了差错报文                    查询报文2种  回送请求和回答：          请求报文：向特定主机发出询问      回答报文：收到请求的主机必须回复      测试目的站是否可达+状态        时间戳请求和回答          请主机回答当前的日期和时间      时钟同步和测量时间      差错报文5种  终点不可达：目的主机、路由不能交付数据报  源点抑制：目的拥塞而丢弃报文，通知源点数据发送速率放慢  时间超过：          路由因TTL &lt; 0而丢弃报文时，要通知源点      规定时间内没有收到一个报文的全部报片，会将已收到的全部丢弃，并通知源点        参数问题：首部检验与字段发现传输中出现误码，丢弃且通知源点  改变路由（重定向）：路由路径有更优解时不可发送差错报文的情况：  对ICMP差错报文 不再发送 差错报文          对第一个分片的数据报片的所有后续数据报片 都不再发送差错报文      对具有多播地址的数据报 都不发送ICMP差错报文      对特殊地址的数据报 不发送差错报文      ARP？"
  },
  
  {
    "title": "3. 链路层",
    "url": "/posts/3.%E9%93%BE%E8%B7%AF%E5%B1%82/",
    "categories": "计算机网络",
    "tags": "computerNetwork",
    "date": "2022-06-13 00:00:00 +0800",
    





    
    "snippet": "链路层  链路（Link）：两个结点间的物理线路  数据链路：把实现通信协议的硬件和软件，加到链路上  封装成帧：加上帧头 帧尾  差错检测：帧尾的检验码  可靠传输：接收方发现帧验证错误，丢弃该帧而不接受广播通道链路：将目标地址、源地址写入帧头共享式局域网信号碰撞问题：接入控制协议 CSMA/CD封装成帧            1字节      1字节      1字节      2字节 ...",
    "content": "链路层  链路（Link）：两个结点间的物理线路  数据链路：把实现通信协议的硬件和软件，加到链路上  封装成帧：加上帧头 帧尾  差错检测：帧尾的检验码  可靠传输：接收方发现帧验证错误，丢弃该帧而不接受广播通道链路：将目标地址、源地址写入帧头共享式局域网信号碰撞问题：接入控制协议 CSMA/CD封装成帧            1字节      1字节      1字节      2字节      &lt;1500字节      2字节      1字节                  标志（开始）      地址      控制      协议      数据      FCS      标志（结束）              帧头                    帧头             帧尾      帧尾        帧定界：          帧头帧尾      MAC没有帧头定界标志，用物理层的前导码作为其帧开始标志      帧间间隔（96bite发送时间）作为标志        透明传输：数据链路层 对上层交付的数据没有任何限制，就如同透明的一样          帧中出现数据与定界符一致，将导致接收方识别错误信息，不能实现透明      发送前扫描，将相似的数据添加转义 【面向字符类型：1字节，值27】【面向比特类型：每五个比特1插入一个0】        最大传输单元 MTU，数据部分应该尽可能大些，但为差错检查等数据链路层功能的保证，设定的值差错检测  基本概念：          比特差错：比特在传输过程中可能发生的差错，1→0,0→1      误码率（BER，bit error rate）= 传输错误的比特 / 总比特      使用错误检测码 检验是否发生了错误        奇偶校验          使整个数据（包括检验位）中“1”的个数为奇数 / 偶数；      出现偶个数误码，无法检出        循环冗余校验（CRC，cyclic redundancy check）          双方约定的生成多项式G(x)，必须包含最低次项      发送方：计算出冗余码，添加到待传输数据后面      接收方：使用多项式计算数据，判断是否产生误码      漏检率极低，只能检测出发生差错，而不能定位      G(x) = x^4 +x^2 +X^1 + 1  \t = 1*x^4 + 0*x^3 + 1x^2 + 1x^1 + 1*x^0\t = 生成多项式各项系数构成的比特串：10111发送方：[ 待传输数据bit + G(x)最高次个0（4个0）]÷生成多项式各项系数构成的比特串 = 商 ···· 余数发生的数据：待传输数据bit + 补全的余数接收方：[ 接收数据 + 余数 ] ÷ 生成多项式各项系数构成的比特串 = 商 ···· 0 才是正确的可靠传输服务​\t当发生误码时，对帧的操作，取决于向上层提供的服务类型。  不可靠传输服务：仅仅丢弃（有线链路中使用，出现误码由上层负责）  可靠传输服务：检测到误码发生的位置（无线链路必须提供）其它层级也可使用可靠传输服务不仅仅局限于数据链路层，其他层级也可能出现传输差错            比特差错      分组丢失      分组失序      分组重复                  数据链路层                           网络层 IP协议：无连接、不可靠运输层 TCP协议：连接、可靠运输层 UDP协议：无连接、不可靠可靠传输的实现机制​\t【三种方式，待补充】"
  },
  
  {
    "title": "2. 计算机网络用语",
    "url": "/posts/2.%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/",
    "categories": "计算机网络",
    "tags": "computerNetwork",
    "date": "2022-06-12 00:00:00 +0800",
    





    
    "snippet": "专业术语实体协议  控制两个对等实体的逻辑通信规范的集合  三要素：语法、语义、时序",
    "content": "专业术语实体协议  控制两个对等实体的逻辑通信规范的集合  三要素：语法、语义、时序"
  },
  
  {
    "title": "1. 计算机网络分层",
    "url": "/posts/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82/",
    "categories": "计算机网络",
    "tags": "computerNetwork",
    "date": "2022-06-10 00:00:00 +0800",
    





    
    "snippet": "网络分层模型OSI：开放式系统互联【物理链路层：物理层+链路层 – Link】【内核态】  物理层：bit，①物理接口，②怎样的信号表示比特  数据链路层：帧，①标识主机MAC，②识别MAC与数据地址访问媒介【网络层 – IP ICMP ARP】【内核态】  网络层：包，IP地址访问【传输层 – TCP UDP】【内核态】  传输层：段，不同主机用户进程的数据通信【应用层 – HTTP FT...",
    "content": "网络分层模型OSI：开放式系统互联【物理链路层：物理层+链路层 – Link】【内核态】  物理层：bit，①物理接口，②怎样的信号表示比特  数据链路层：帧，①标识主机MAC，②识别MAC与数据地址访问媒介【网络层 – IP ICMP ARP】【内核态】  网络层：包，IP地址访问【传输层 – TCP UDP】【内核态】  传输层：段，不同主机用户进程的数据通信【应用层 – HTTP FTP DNS ..】【用户态】  会话层：数据，应用之间的通信机制  表示层：数据，信息语法问题  应用层：数据，进程间通信、提供网络和用户应用各层传输设备【应用层 -（网关）- 传输层 - 网络层（路由器） - （交换机） - 数据链路层（网桥） - 物理层（集线器、中继器）】  网关：          实现复杂网络互连设备      仅用于 高层协议不同的网络 互通      可用于广域网，也可用于局域网        路由器：路由选择、存储转发；隔离冲突域+广播域  交换机：          识别MAC地址信息，并进行转发      保存一份地址表，包括 MAC地址+端口      隔离冲突域，不隔离广播域        网桥：          将两个LAN连接，根据MAC地址转发 帧      隔离冲突域，不隔离广播域        集线器：纯硬件设备，连接网络终端  中继层：延长bite在网络传输距离透明性？            [前导码]      [ETH]      [HTTP]      [TCP]      [IP]      [ETH]                  [物理层]      [数据链路层]      [应用层]      [运输层]      [网络层]      [数据链路层]                            HTTP报文                                                        TCP报文段                                                        IP数据报                            帧                                          字节流                                         "
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 00:34:00 +0800",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 20:55:00 +0800",
    





    
    "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to cr...",
    "content": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme:  Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing.  GitHub Fork - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterSign in to GitHub and browse to Chirpy Starter, click the button Use this template &gt; Create a new repository, and name the new repository USERNAME.github.io, where USERNAME represents your GitHub username.Option 2. GitHub ForkSign in to GitHub to fork Chirpy, and then rename it to USERNAME.github.io (USERNAME means your username).Next, clone your site to local machine. In order to build JavaScript files later, we need to install Node.js, and then run the tool:$ bash tools/init  If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will:  Check out the code to the latest tag (to ensure the stability of your site: as the code for the default branch is under development).  Remove non-essential sample files and take care of GitHub-related files.  Build JavaScript files and export to assets/js/dist/, then make them tracked by Git.  Automatically create a new commit to save the changes above.Installing DependenciesBefore running local server for the first time, go to the root directory of your site and run:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options:  url  avatar  timezone  langSocial Contact OptionsSocial contact options are displayed at the bottom of the sidebar. You can turn on/off the specified contacts in file _data/contact.yml.Customizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/jekyll-theme-chirpy.scss to the same path on your Jekyll site, and then add the custom style at the end of it.Starting with version 6.2.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, copy the main sass file _sass/main.scss into the _sass directory in your site’s source, then create a new file _sass/variables-hook.scss and assign new value.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/origin/cors.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sAfter a few seconds, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsThere are a few things to get ready for.  If you’re on the GitHub Free plan, keep your site repository public.      If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, go the the root of your site and update the platform list of the lock-file:    $ bundle lock --add-platform x86_64-linux      Next, configure the Pages service.      Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu.        Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically.  At this point, you can go to the URL indicated by GitHub to access your site.Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 14:10:00 +0800",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$  Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the img_path can also be passed to the preview image, that is, when it has been set, the  attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post Text and Typography.For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.VideosYou can embed a video with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211      Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 11:33:00 +0800",
    





    
    "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.HeadingsH1 - headingH2 - headingH3 - headingH...",
    "content": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.HeadingsH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;              The 2nd footnote source &#8617;      "
  }
  
]

